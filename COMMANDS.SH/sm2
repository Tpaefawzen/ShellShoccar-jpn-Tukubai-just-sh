#! /bin/sh

# designed by Nobuaki Tounaka
# written by 321516

# print the usage and exit
print_usage_and_exit () {
  cat <<-__USAGE 1>&2
	Usage   : ${0##*/} [+count] <k1> <k2> <s1> <s2> <file>
	Version : 2017-07-18 00:23:25 JST
	        : Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands)
__USAGE
  exit 1
}


# initialize
set -u
umask 0022
PATH='/usr/bin:/bin'
IFS=$(printf ' \t\n_'); IFS=${IFS%_}
export IFS LANG=C LC_ALL=C PATH
count=0
k1=''; k2=''; s1=''; s2=''
file=''

# parse the arguments
case $#   in        0) print_usage_and_exit;; esac
case "$1" in '+count') count=1;shift       ;; esac
case $#   in   [0123]) print_usage_and_exit;; esac
printf '%s' "$1" | grep -Eq '^([0-9]+|NF(-[0-9]+)?)$' || print_usage_and_exit
printf '%s' "$2" | grep -Eq '^([0-9]+|NF(-[0-9]+)?)$' || print_usage_and_exit
printf '%s' "$3" | grep -Eq '^([0-9]+|NF(-[0-9]+)?)$' || print_usage_and_exit
printf '%s' "$4" | grep -Eq '^([0-9]+|NF(-[0-9]+)?)$' || print_usage_and_exit
if echo "$1" | grep -q '^0\{1,\}$'; then
  echo "$2" | grep -q '^0\{1,\}$' || print_usage_and_exit
else
  echo "$2" | grep -q '^0\{1,\}$' && print_usage_and_exit
fi
echo "$3" | grep -q '^0\{1,\}$' && print_usage_and_exit
echo "$4" | grep -q '^0\{1,\}$' && print_usage_and_exit
k1=$1; k2=$2; s1=$3; s2=$4
shift 4
case $# in
  0) file='-'                                                            ;;
  1) file=$1
     [ \( -f "$file" \) -o \( -c "$file" \) -o \( -p "$file" \) -o \
       \( "_$file" = '_-' \)                                       ] || {
       print_usage_and_exit
     }                                                                   ;;
  *) print_usage_and_exit                                                ;;
esac
[ \( -r "$file" \) -o \( "_$file" = '_-' \) ] || {
  printf '%s: Cannot open the file\n' "${0##*/}" 1>&2
  exit 1
}
case "$file" in ''|-|/*|./*|../*) :;; *) file="./$file";; esac


# generate the awkcode of making keystring
case "${s1%NF*}${s2%NF*}" in
  "$s1$s2") keyfields=$(awk -v s=$k1 -v e=$k2 '                          #
                          BEGIN{if((s==0)&&(e==0)){print "\"\"";exit;}   #
                                if( s>e          ){i=e; e=s; s=i;    }   #
                                for(i=s;i<=e;i++ ){printf("$%d",i)   }}' |
                        sed 's/\([0-9]\)\$/\1 FS $/g'                    )
            ;;
  '')       k1=$((0${k1#NF})); k2=$((0${k2#NF}))
            keyfields=$(awk -v s=$k1 -v e=$k2 '                          #
                          BEGIN{if(s>e){i=e;e=s;s=i;}                    #
                                for(i=s;i<=e;i++){printf("$(NF%d)",i)}}' |
                        sed 's/)$/) FS $/g'                              |
                        sed 's/(NF0)/NF/g'                               )
            ;;
  *)        keyfields=$(printf 'getfldclstr(%s,%s)' "$k1" "$k2")
            ;;
esac


# sum-up
export myname=${0##*/}
exec awk -v addcountfield=$count -v CONVFMT=%.11g -v OFMT=%.11g '
BEGIN {
  nf0  = -1;
  key0 = "";
  split("", sum);
  samekeylines = 0;
  _assert_exit = 0;
  ORS="";
}

nf0<0  {
  nf0=NF;
  if ('$s1'>'$s2') {s2='$s1';s1='$s2'} else {s1='$s1';s2='$s2'}
}
NF!=nf0{
  msg = "%s: A record which has different number of fields was found. Abort!\n";
  printf(msg , ENVIRON["myname"]) | "cat 1>&2";
  _assert_exit = 1;
  exit;
}
{
  key = '"$keyfields"';
  if (key == key0) {
    samekeylines++;
    for (i = s1; i <= s2; i++) {sum[i] += $i;}
  } else {
    print_smrecord();
    key0 = key;
    samekeylines = 1;
    for (i = s1; i <= s2; i++) {sum[i]  = $i;}
  }
}

END {
  if (_assert_exit) {exit _assert_exit;}
  print_smrecord();
}

function print_smrecord() {
  if (samekeylines==0) {return;}
  if (key0 == "") {
    if (addcountfield) {
                                  print    samekeylines;
      for (i = s1; i <= s2; i++) {print FS sum[i]      ;}
    } else             {
      for (i = s1; i <= s1; i++) {print    sum[i]      ;}
      for (      ; i <= s2; i++) {print FS sum[i]      ;}
    }
  } else          {
                                print    key0           ;
    if (addcountfield)         {print FS samekeylines   ;}
    for (i = s1; i <= s2; i++) {print FS sum[i]         ;}
  }
  printf("\n");
}

function getfldclstr(fldnum1,fldnum2 ,i,str) {
  str = $fldnum1;
  if (fldnum1 <= fldnum2) {
    for (i=fldnum1+1;i<=fldnum2;i++) {
      str = str FS $i;
    }
  } else {
    for (i=fldnum1-1;i>=fldnum2;i--) {
      str = str FS $i;
    }
  }
  return str;
}' "$file"
